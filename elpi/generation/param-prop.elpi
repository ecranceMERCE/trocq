%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                            %                     Trocq                      %
%  _______                   %        Copyright (C) 2023 Inria & MERCE        %
% |__   __|                  %     (Mitsubishi Electric R&D Centre Europe)    %
%    | |_ __ ___   ___ __ _  %        Cyril Cohen <cyril.cohen@inria.fr>      %
%    | | '__/ _ \ / __/ _` | %        Enzo Crance <enzo.crance@inria.fr>      %
%    | | | | (_) | (_| (_| | %    Assia Mahboubi <assia.mahboubi@inria.fr>    %
%    |_|_|  \___/ \___\__, | %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                        | | %   This file is distributed under the terms of  %
%                        |_| %   GNU Lesser General Public License Version 3  %
%                            % (see LICENSE file for the text of the license) %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pred generate-fields
  i:map-class, i:term, i:param-class, o:list term.
generate-fields map0 R _ [R].
generate-fields map1 R _ [R, Map] :-
  Map = (fun `T` (sort prop) t\ t).
generate-fields map2a R RClass [R, Map, MapInR] :- std.do! [
  Prop = sort prop,
  Map = (fun `T` Prop t\ t),
  (pi a\ coq.mk-app R [a] (RF a)),
  Paths = {trocq.db.paths _},
  trocq.db.transport Transport,
  IdParam = const {trocq.db.id-param RClass},
  coq.env.global Transport TransportTm,
  coq.env.global IdParam IdParamTm,
  MapInR =
    (fun `A` Prop a\ fun `B` Prop b\
      fun `e` (app [Paths, Prop, a, b]) e\
        app [TransportTm, Prop, RF a, a, b,
          e, app [IdParamTm, a]])
].

pred generate-map-prop i:map-class, i:param-class.
generate-map-prop M RClass :- std.do! [
  trocq.db.rel RClass R _ _ _ _,
  Prop = sort prop,
  coq.env.global R RTm,
  % RTm = {{fun A B : Prop => lp:RTmNoEta A B}},
  generate-fields M RTm RClass Fields,
  coq.locate "sym_rel" SymRel,
  coq.env.global SymRel SymRelTm,
  generate-fields
    M (app [SymRelTm, Prop, Prop, RTm])
    RClass FieldsSym,
  coq.locate {calc ("Map" ^ {map-class.to_string M} ^ ".BuildHas")} BuildHas,
  coq.env.global BuildHas BuildHasTm,
  coq.mk-app BuildHasTm [Prop, Prop | Fields] Decl,
  coq.mk-app BuildHasTm [Prop, Prop | FieldsSym] DeclSym,
  MapProp is
    "Map" ^ {map-class.to_string M} ^ "_Prop" ^ {param-class.to_string RClass},
  MapPropSym is
    "Map" ^ {map-class.to_string M} ^ "_Prop_sym" ^
    {param-class.to_string RClass},
  % these typechecks are very important: they add L < L1 to the constraint graph
  std.assert-ok! (coq.elaborate-skeleton Decl _Ty Decl')
    "generate-map-prop: Decl cannot be elaborated",
  std.assert-ok! (coq.elaborate-skeleton DeclSym _Ty' DeclSym')
    "generate-map-prop: Decl cannot be elaborated",
  % std.assert-ok! (coq.typecheck Decl _)
  %    "generate-map-prop: Decl ill-typed",
  % std.assert-ok! (coq.typecheck DeclSym _)
  %    "generate-map-prop: DeclSym ill-typed",
  @univpoly! ==>
    coq.env.add-const MapProp Decl' _ @transparent! _,
    coq.env.add-const MapPropSym DeclSym' _ @transparent! _
].
