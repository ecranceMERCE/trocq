%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                            %                     Trocq                      %
%  _______                   %        Copyright (C) 2023 Inria & MERCE        %
% |__   __|                  %     (Mitsubishi Electric R&D Centre Europe)    %
%    | |_ __ ___   ___ __ _  %        Cyril Cohen <cyril.cohen@inria.fr>      %
%    | | '__/ _ \ / __/ _` | %        Enzo Crance <enzo.crance@inria.fr>      %
%    | | | | (_) | (_| (_| | %    Assia Mahboubi <assia.mahboubi@inria.fr>    %
%    |_|_|  \___/ \___\__, | %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                        | | %   This file is distributed under the terms of  %
%                        |_| %   GNU Lesser General Public License Version 3  %
%                            % (see LICENSE file for the text of the license) %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pred generate-fields
  i:map-class, i:term, i:param-class, i:univ,
  i:univ.variable, i:univ.variable, o:list term.
generate-fields map0 R _ _ _ _ [R].
generate-fields map1 R _ U _ _ [R, Map] :-
  Map = (fun `T` (sort (typ U)) t\ t).
generate-fields map2a R RClass U L L1 [R, Map, MapInR] :-
  Type = sort (typ U),
  coq.univ-instance UI [L],
  coq.univ-instance UI1 [L1],
  coq.univ-instance UI11 [L1, L1],
  Map = (fun `T` Type t\ t),
  (pi a\ coq.mk-app R [a] (RF a)),
  Paths = {trocq.db.paths UI1},
  coq.locate "transport" Transport,
  IdParam = const {trocq.db.id-param RClass},
  MapInR =
    (fun `A` Type a\ fun `B` Type b\
      fun `e` (app [Paths, Type, a, b]) e\
        app [pglobal Transport UI11, Type, RF a, a, b,
          e, app [pglobal IdParam UI, a]]).

pred generate-map-type
  i:map-class, i:param-class, i:univ, i:univ.variable, i:univ.variable.
generate-map-type M RClass U L L1 :-
  trocq.db.rel RClass R _ _ _ _,
  Type = sort (typ U),
  coq.univ-instance UI [L],
  coq.univ-instance UI1 [L1],
  generate-fields M (pglobal R UI) RClass U L L1 Fields,
  coq.locate "sym_rel" SymRel,
  generate-fields
    M (app [pglobal SymRel UI1, Type, Type, pglobal R UI])
    RClass U L L1 FieldsSym,
  coq.locate {calc ("Map" ^ {map-class.to_string M} ^ ".BuildHas")} BuildHas,
  Decl = app [pglobal BuildHas UI1, Type, Type | Fields],
  DeclSym = app [pglobal BuildHas UI1, Type, Type | FieldsSym],
  MapType is
    "Map" ^ {map-class.to_string M} ^ "_Type" ^ {param-class.to_string RClass},
  MapTypeSym is
    "Map" ^ {map-class.to_string M} ^ "_Type_sym" ^
    {param-class.to_string RClass},
  % these typechecks are very important: they add L < L1 to the constraint graph
  std.assert-ok! (coq.typecheck Decl _) "generate-map-type: Decl ill-typed",
  std.assert-ok! (coq.typecheck DeclSym _) "generate-map-type: DeclSym ill-typed",
  @udecl! [L, L1] ff [lt L L1] tt ==>
    coq.env.add-const MapType Decl _ @transparent! _,
    coq.env.add-const MapTypeSym DeclSym _ @transparent! _.

pred generate-param-type
  i:param-class, i:param-class, i:univ, i:univ.variable, i:univ.variable.
generate-param-type (pc M N as Class) RClass U L L1 :-
  map-class.to_string M MStr,
  map-class.to_string N NStr,
  coq.univ-instance UI [L],
  coq.univ-instance UI1 [L1],
  coq.univ-instance UI2 [L, L1],
  trocq.db.rel Class _ BuildRel _ _ _,
  coq.locate
    {calc ("Map" ^ MStr ^ "_Type" ^ {param-class.to_string RClass})} MapType,
  coq.locate
    {calc ("Map" ^ NStr ^ "_Type_sym" ^ {param-class.to_string RClass})}
    MapTypeSym,
  trocq.db.rel RClass R _ _ _ _,
  if (std.mem! [map2b, map3, map4] M) (
    UnivalentDecl = true,
    MapTypeF = (u\ app [pglobal MapType UI2, u]),
    if (std.mem! [map2b, map3, map4] N)
      (MapTypeSymF = (u\ app [pglobal MapTypeSym UI2, u]))
      (MapTypeSymF = (_\ pglobal MapTypeSym UI2))
  ) (
    MapTypeF = (_\ pglobal MapType UI2),
    if (std.mem! [map2b, map3, map4] N) (
      MapTypeSymF = (u\ app [pglobal MapTypeSym UI2, u]),
      UnivalentDecl = true
    ) (
      MapTypeSymF = (_\ pglobal MapTypeSym UI2),
      UnivalentDecl = false
    )
  ),
  % in the univalent case, add the axiom in the binder
  if (UnivalentDecl) (
    coq.locate "Univalence" Univalence,
    Decl =
      (fun `H` (global Univalence) u\
        app [pglobal BuildRel UI1, sort (typ U), sort (typ U), pglobal R UI,
          MapTypeF u, MapTypeSymF u])
  ) (
    Dummy = (fun `x` (sort (typ U)) x\ x),
    Decl =
      app [pglobal BuildRel UI1, sort (typ U), sort (typ U), pglobal R UI,
        MapTypeF Dummy, MapTypeSymF Dummy]
  ),
  ParamType is "Param" ^ MStr ^ NStr ^ "_Type" ^ {param-class.to_string RClass},
  % this typecheck is very important: it adds L < L1 to the constraint graph
  std.assert-ok! (coq.typecheck Decl _) "generate-param-type: Decl is ill-typed",
  (@udecl! [L, L1] ff [lt L L1] tt =>
    coq.env.add-const ParamType Decl _ @transparent! Const),
  coq.elpi.accumulate _ "trocq.db" (clause _ _ (trocq.db.param-type Class RClass Const)).
