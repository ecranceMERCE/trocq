%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                            %                     Trocq                      %
%  _______                   %        Copyright (C) 2023 Inria & MERCE        %
% |__   __|                  %     (Mitsubishi Electric R&D Centre Europe)    %
%    | |_ __ ___   ___ __ _  %        Cyril Cohen <cyril.cohen@inria.fr>      %
%    | | '__/ _ \ / __/ _` | %        Enzo Crance <enzo.crance@inria.fr>      %
%    | | | | (_) | (_| (_| | %    Assia Mahboubi <assia.mahboubi@inria.fr>    %
%    |_|_|  \___/ \___\__, | %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                        | | %   This file is distributed under the terms of  %
%                        |_| %   GNU Lesser General Public License Version 3  %
%                            % (see LICENSE file for the text of the license) %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

pred generate-branch i:univ-instance, i:param-class, i:param-class, o:term.
generate-branch UI2 Class RClass (pglobal ParamType UI2) :-
  coq.locate
    {calc ("Param" ^ {param-class.to_string Class} ^ "_Type" ^ {param-class.to_string RClass})}
    ParamType.

pred generate-match2
  i:term, i:univ-instance, i:param-class, i:term, i:map-class, o:term.
generate-match2 RetType UI2 Class QVar P Match :-
  map-class.all-of-kind all Classes, std.map Classes
    (q\ b\ generate-branch UI2 Class (pc P q) b) Branches,
  coq.locate "map_class" MapClass,
  coq.univ-instance UI0 [],
  Match = (match QVar (fun `_` (pglobal MapClass UI0) _\ RetType) Branches).

pred generate-match1
  i:term, i:univ-instance, i:param-class, i:term, i:term, o:term.
generate-match1 RetType UI2 Class PVar QVar Match :-
  map-class.all-of-kind all Classes, std.map Classes
    (p\ b\ generate-match2 RetType UI2 Class QVar p b) Branches,
  coq.locate "map_class" MapClass,
  coq.univ-instance UI0 [],
  Match = (match PVar (fun `_` (pglobal MapClass UI0) _\ RetType) Branches).

pred generate-pparam-type
  i:univ.variable, i:univ.variable, i:param-class.
generate-pparam-type L L1 Class :-
  trocq.db.rel Class ParamRel _ _ _ _,
  coq.univ-instance UI1 [L1],
  RetType = app [pglobal ParamRel UI1, sort (typ U), sort (typ U)],
  coq.univ-instance UI2 [L, L1],
  (pi p q\ generate-match1 RetType UI2 Class p q (MatchF p q)),
  Decl = (fun `p` {{ map_class }} p\ fun `q` {{ map_class }} q\ MatchF p q),
  % this typecheck is very important: it adds L < L1 to the constraint graph
  std.assert-ok! (coq.typecheck Decl _) "generate-pparam-type: Decl is ill-typed",
  PParamType is "PParam" ^ {param-class.to_string Class} ^ "_Type",
  (@udecl! [L, L1] ff [lt L L1] tt =>
    coq.env.add-const PParamType Decl _ @transparent! Const),
  coq.elpi.accumulate _ "trocq.db" (clause _ _ (trocq.db.pparam-type Class Const)).

pred generate-pparam-type44
  i:univ.variable, i:univ.variable, i:param-class.
generate-pparam-type44 L L1 Class :-
  coq.univ-instance UI2 [L, L1],
  coq.locate {calc ("Param" ^ {param-class.to_string Class} ^ "_Type44")} ParamType,
  Decl = (fun `_` {{ map_class }} _\ fun `_` {{ map_class }} _\ pglobal ParamType UI2),
  % this typecheck is very important: it adds L < L1 to the constraint graph
  std.assert-ok! (coq.typecheck Decl _) "generate-pparam-type44: Decl is ill-typed",
  PParamType is "PParam" ^ {param-class.to_string Class} ^ "_Type",
  (@udecl! [L, L1] ff [lt L L1] ff =>
    coq.env.add-const PParamType Decl _ @transparent! Const),
  coq.elpi.accumulate _ "trocq.db" (clause _ _ (trocq.db.pparam-type Class Const)).
